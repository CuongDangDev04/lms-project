const {
  User,
  UserNotification,
  Notification,
  Classroom,
  UserParticipation,
  Course,
} = require("../../models");
const { getIO, onlineUsers } = require("../../config/socket");
const { Op } = require("sequelize");
const jwt = require("jsonwebtoken");
// G·ª≠i th√¥ng b√°o cho m·ªôt user_id c·ª• th·ªÉ
const sendNotificationToSpecificUser = async (req, res) => {
  try {
    const { target_user_id, notificationType, message } = req.body;

    // Ki·ªÉm tra ƒë·∫ßu v√†o
    if (!target_user_id) {
      return res.status(400).json({ error: "Target User ID l√† b·∫Øt bu·ªôc!" });
    }
    if (!message) {
      return res.status(400).json({ error: "Th√¥ng b√°o kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!" });
    }
    if (!["tag", "system", "classroom"].includes(notificationType)) {
      return res.status(400).json({ error: "Lo·∫°i th√¥ng b√°o kh√¥ng h·ª£p l·ªá!" });
    }

    // Ki·ªÉm tra user nh·∫≠n c√≥ t·ªìn t·∫°i kh√¥ng
    const targetUser = await User.findOne({
      where: { user_id: target_user_id },
      attributes: ["user_id"],
    });

    if (!targetUser) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng nh·∫≠n!" });
    }

    // T·∫°o notification
    const notification = await Notification.create({
      notification_type: notificationType,
      message,
    });

    // T·∫°o th√¥ng b√°o cho user c·ª• th·ªÉ
    const userNotification = await UserNotification.create({
      user_id: target_user_id,
      notification_id: notification.notification_id,
      status: 0, // Tr·∫°ng th√°i m·∫∑c ƒë·ªãnh: ch∆∞a ƒë·ªçc
    });
    // G·ª≠i th√¥ng b√°o qua Socket.IO n·∫øu user ƒëang online
    const io = getIO();
    const unreadNotificationCount = await UserNotification.count({
      where: { user_id: target_user_id, status: 0 },
    });
    const receiverSocketId = onlineUsers[target_user_id];
    if (receiverSocketId) {
      io.to(receiverSocketId).emit("receiveNotification", {
        notification_id: userNotification.notification_id,
        message,
        timestamp: new Date().toISOString(),
        status: 0,
      });

      io.to(receiverSocketId).emit("toastNotification", {
        notificationType,
        message,
      });
      io.to(receiverSocketId).emit("unreadNotificationCount", {
        unreadNotificationCount,
      });

      console.log(`üì© ƒê√£ g·ª≠i th√¥ng b√°o ƒë·∫øn user ${target_user_id}`);
    } else {
      console.log(
        `‚ö†Ô∏è User ${target_user_id} kh√¥ng online, ch·ªâ l∆∞u v√†o database.`
      );
    }

    res.status(201).json({
      message: `ƒê√£ g·ª≠i th√¥ng b√°o ƒë·∫øn user ${target_user_id}!`,
    });
  } catch (error) {
    console.error("L·ªói khi g·ª≠i th√¥ng b√°o cho user c·ª• th·ªÉ:", error);
    res.status(500).json({ error: "L·ªói khi g·ª≠i th√¥ng b√°o!" });
  }
};

// G·ª≠i th√¥ng b√°o cho t·∫•t c·∫£ user trong m·ªôt kh√≥a h·ªçc
const sendNotificationToClassroomUsers = async (req, res) => {
  try {
    const { classroom_id, notificationType, message } = req.body;
    console.log(req.body);

    // Ki·ªÉm tra ƒë·∫ßu v√†o
    if (!classroom_id) {
      return res.status(400).json({ error: "Classroom ID l√† b·∫Øt bu·ªôc!" });
    }
    if (!message) {
      return res.status(400).json({ error: "Th√¥ng b√°o kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!" });
    }
    if (!["tag", "system", "classroom"].includes(notificationType)) {
      return res.status(400).json({ error: "Lo·∫°i th√¥ng b√°o kh√¥ng h·ª£p l·ªá!" });
    }

    // L·∫•y danh s√°ch t·∫•t c·∫£ user tham gia trong classroom_id n√†y
    const participations = await UserParticipation.findAll({
      where: { classroom_id }, // Ch·ªâ t√¨m theo classroom_id c·ª• th·ªÉ
      attributes: ["user_id"],
    });

    if (!participations || participations.length === 0) {
      return res
        .status(404)
        .json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o trong l·ªõp h·ªçc n√†y!" });
    }

    const userIds = [...new Set(participations.map((p) => p.user_id))]; // Lo·∫°i b·ªè tr√πng l·∫∑p

    // L·ªçc ch·ªâ l·∫•y sinh vi√™n c√≥ role_id = 1
    const users = await User.findAll({
      where: {
        user_id: userIds,
        role_id: 1, // Ch·ªâ l·∫•y sinh vi√™n c√≥ role_id = 1
      },
      attributes: ["user_id"],
    });

    if (!users || users.length === 0) {
      return res
        .status(404)
        .json({ error: "Kh√¥ng t√¨m th·∫•y sinh vi√™n n√†o trong l·ªõp h·ªçc n√†y!" });
    }

    // T·∫°o notification
    const notification = await Notification.create({
      notification_type: notificationType,
      message,
    });

    // T·∫°o danh s√°ch th√¥ng b√°o cho t·∫•t c·∫£ user
    const notifications = users.map((user) => ({
      user_id: user.user_id,
      notification_id: notification.notification_id,
      status: 0, // Tr·∫°ng th√°i m·∫∑c ƒë·ªãnh: ch∆∞a ƒë·ªçc
    }));

    // L∆∞u t·∫•t c·∫£ th√¥ng b√°o v√†o database
    await UserNotification.bulkCreate(notifications);

    // G·ª≠i th√¥ng b√°o qua Socket.IO
    const io = getIO();
    for (const user of users) {
      const unreadNotificationCount = await UserNotification.count({
        where: { user_id: user.user_id, status: 0 },
      });
      const receiverSocketId = onlineUsers[user.user_id];
      if (receiverSocketId) {
        // G·ª≠i th√¥ng b√°o chi ti·∫øt
        io.to(receiverSocketId).emit("receiveNotification", {
          notification_id: notification.notification_id,
          message,
          timestamp: new Date().toISOString(),
          status: 0,
          classroom_id, // G·ª≠i classroom_id thay v√¨ course_id
        });

        // G·ª≠i toast notification
        io.to(receiverSocketId).emit("toastNotification", {
          notificationType,
          message,
          classroom_id, // G·ª≠i classroom_id thay v√¨ course_id
        });
        io.to(receiverSocketId).emit("unreadNotificationCount", {
          unreadNotificationCount,
        });
      } else {
        console.log(
          `‚ö†Ô∏è Sinh vi√™n ${user.user_id} kh√¥ng online, ch·ªâ l∆∞u v√†o database.`
        );
      }
    }

    res.status(201).json({
      message: `ƒê√£ g·ª≠i th√¥ng b√°o ƒë·∫øn ${users.length} sinh vi√™n trong l·ªõp h·ªçc ${classroom_id}!`,
    });
  } catch (error) {
    console.error("L·ªói khi g·ª≠i th√¥ng b√°o cho l·ªõp h·ªçc:", error);
    res.status(500).json({ error: "L·ªói khi g·ª≠i th√¥ng b√°o cho l·ªõp h·ªçc!" });
  }
};
//g·ª≠i th√¥ng b√°o cho t·∫•t c·∫£ ng∆∞·ªùi d√πng
const sendNotificationAllUser = async (req, res) => {
  try {
    const { notificationType, message } = req.body;

    // Ki·ªÉm tra ƒë·∫ßu v√†o

    if (!message) {
      return res.status(400).json({ error: "Th√¥ng b√°o kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!" });
    }
    if (!["tag", "system", "classroom"].includes(notificationType)) {
      return res.status(400).json({ error: "Lo·∫°i th√¥ng b√°o kh√¥ng h·ª£p l·ªá!" });
    }

    // L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng
    const users = await User.findAll({
      attributes: ["user_id"],
    });

    if (!users || users.length === 0) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o!" });
    }
    const notification = await Notification.create({
      notification_type: notificationType,
      message,
    });
    // T·∫°o danh s√°ch th√¥ng b√°o cho t·∫•t c·∫£ user
    const notifications = users.map((user) => ({
      user_id: user.user_id,
      notification_id: notification.notification_id,
      status: 0, // Tr·∫°ng th√°i m·∫∑c ƒë·ªãnh
    }));

    // L∆∞u t·∫•t c·∫£ th√¥ng b√°o v√†o database b·∫±ng bulkCreate
    const createdNotifications = await UserNotification.bulkCreate(
      notifications
    );

    // G·ª≠i th√¥ng b√°o qua Socket.IO cho t·∫•t c·∫£ client
    const io = getIO();
    for (const user of users) {
      // üÜï L·∫•y t·ª´ng user object
      const unreadNotificationCount = await UserNotification.count({
        where: { user_id: user.user_id, status: 0 },
      });
      const receiverSocketId = onlineUsers[user.user_id]; // üÜï Truy c·∫≠p ƒë√∫ng user_id
      if (receiverSocketId) {
        io.to(receiverSocketId).emit("receiveNotification", {
          notification_id: notification.notification_id,
          message,
          timestamp: new Date().toISOString(),
          status: 0,
        });
        console.log(`üì© ƒê√£ g·ª≠i th√¥ng b√°o ƒë·∫øn user ${user.user_id}`);
        io.to(receiverSocketId).emit("toastNotification", {
          notificationType,
          message,
        });
        io.to(receiverSocketId).emit("unreadNotificationCount", {
          unreadNotificationCount,
        });
        console.log(
          `üì¢ ƒê√£ g·ª≠i toastNotification: ${message} ƒë·∫øn user ${user.user_id}`
        );
      } else {
        console.log(
          `‚ö†Ô∏è User ${user.user_id} kh√¥ng online, ch·ªâ l∆∞u v√†o database.`
        );
      }
    }

    res.status(201).json({
      message: `ƒê√£ g·ª≠i th√¥ng b√°o ƒë·∫øn ${users.length} ng∆∞·ªùi d√πng!`,
    });
  } catch (error) {
    console.error("L·ªói khi g·ª≠i th√¥ng b√°o:", error);
    res.status(500).json({ error: "L·ªói khi g·ª≠i th√¥ng b√°o!" });
  }
};

const sendNotificationToClassroomTeachers = async (req, res) => {
  try {
    const { classroom_id, notificationType, message } = req.body;
    console.log(req.body);

    // Ki·ªÉm tra ƒë·∫ßu v√†o
    if (!classroom_id) {
      return res.status(400).json({ error: "Classroom ID l√† b·∫Øt bu·ªôc!" });
    }
    if (!message) {
      return res.status(400).json({ error: "Th√¥ng b√°o kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!" });
    }
    if (!["tag", "system", "classroom"].includes(notificationType)) {
      return res.status(400).json({ error: "Lo·∫°i th√¥ng b√°o kh√¥ng h·ª£p l·ªá!" });
    }

    // L·∫•y danh s√°ch t·∫•t c·∫£ user tham gia trong classroom_id n√†y
    const participations = await UserParticipation.findAll({
      where: { classroom_id }, // Ch·ªâ t√¨m theo classroom_id c·ª• th·ªÉ
      attributes: ["user_id"],
    });

    if (!participations || participations.length === 0) {
      return res
        .status(404)
        .json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o trong l·ªõp h·ªçc n√†y!" });
    }

    const userIds = [...new Set(participations.map((p) => p.user_id))]; // Lo·∫°i b·ªè tr√πng l·∫∑p

    // L·ªçc ch·ªâ l·∫•y gi·∫£ng vi√™n c√≥ role_id = 2 (gi·∫£ s·ª≠ role_id c·ªßa gi·∫£ng vi√™n l√† 2)
    const teachers = await User.findAll({
      where: {
        user_id: userIds,
        role_id: 2, // Ch·ªâ l·∫•y gi·∫£ng vi√™n c√≥ role_id = 2
      },
      attributes: ["user_id"],
    });

    if (!teachers || teachers.length === 0) {
      return res
        .status(404)
        .json({ error: "Kh√¥ng t√¨m th·∫•y gi·∫£ng vi√™n n√†o trong l·ªõp h·ªçc n√†y!" });
    }

    // T·∫°o notification
    const notification = await Notification.create({
      notification_type: notificationType,
      message,
    });

    // T·∫°o danh s√°ch th√¥ng b√°o cho t·∫•t c·∫£ gi·∫£ng vi√™n
    const notifications = teachers.map((teacher) => ({
      user_id: teacher.user_id,
      notification_id: notification.notification_id,
      status: 0, // Tr·∫°ng th√°i m·∫∑c ƒë·ªãnh: ch∆∞a ƒë·ªçc
    }));

    // L∆∞u t·∫•t c·∫£ th√¥ng b√°o v√†o database
    await UserNotification.bulkCreate(notifications);

    // G·ª≠i th√¥ng b√°o qua Socket.IO
    const io = getIO();
    for (const teacher of teachers) {
      const unreadNotificationCount = await UserNotification.count({
        where: { user_id: teacher.user_id, status: 0 },
      });
      const receiverSocketId = onlineUsers[teacher.user_id];
      if (receiverSocketId) {
        // G·ª≠i th√¥ng b√°o chi ti·∫øt
        io.to(receiverSocketId).emit("receiveNotification", {
          notification_id: notification.notification_id,
          message,
          timestamp: new Date().toISOString(),
          status: 0,
          classroom_id,
        });

        // G·ª≠i toast notification
        io.to(receiverSocketId).emit("toastNotification", {
          notification_id: notification.notification_id,
          notificationType,
          message,
          classroom_id,
        });
        io.to(receiverSocketId).emit("unreadNotificationCount", {
          unreadNotificationCount,
        });
        console.log(
          `üì© ƒê√£ g·ª≠i th√¥ng b√°o ƒë·∫øn gi·∫£ng vi√™n ${teacher.user_id} trong l·ªõp h·ªçc ${classroom_id}`
        );
      } else {
        console.log(
          `‚ö†Ô∏è Gi·∫£ng vi√™n ${teacher.user_id} kh√¥ng online, ch·ªâ l∆∞u v√†o database.`
        );
      }
    }

    res.status(201).json({
      message: `ƒê√£ g·ª≠i th√¥ng b√°o ƒë·∫øn ${teachers.length} gi·∫£ng vi√™n trong l·ªõp h·ªçc ${classroom_id}!`,
    });
  } catch (error) {
    console.error("L·ªói khi g·ª≠i th√¥ng b√°o cho gi·∫£ng vi√™n:", error);
    res.status(500).json({ error: "L·ªói khi g·ª≠i th√¥ng b√°o cho gi·∫£ng vi√™n!" });
  }
};

//cmt ph·∫ßn nh·∫≠n th√¥ng b√°o b·∫±ng header request
const getNotifications = async (req, res) => {
  const { userId } = req.query;

  try {
    if (!userId) {
      return res.status(404).json({ error: "Thi·∫øu th√¥ng tin ng∆∞·ªùi d√πng!" });
    }

    const userNotifications = await UserNotification.findAll({
      where: { user_id: userId },
      include: {
        model: Notification,
        attributes: [
          "notification_id",
          "notification_type",
          "message",
          "timestamp",
        ],
      },
    });

    res.status(200).json(userNotifications);
  } catch (error) {
    console.error("L·ªói khi l·∫•y th√¥ng b√°o:", error);
    res.status(500).json({ error: "L·ªói khi l·∫•y th√¥ng b√°o!" });
  }
};
const deleteNotification = async (req, res) => {
  try {
    const { notificationId, userId } = req.query;

    if (!notificationId) {
      return res.status(400).json({ error: "Thi·∫øu th√¥ng tin th√¥ng b√°o!" });
    }

    const notification = await UserNotification.destroy({
      where: { notification_id: notificationId, user_id: userId },
    });

    if (!notification) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y th√¥ng b√°o!" });
    }
    const io = getIO();
    const receiverSocketId = onlineUsers[userId];
    io.to(receiverSocketId).emit("notificationDeleted", notificationId);
    const unreadNotificationCount = await UserNotification.count({
      where: { user_id: userId, status: 0 },
    });
    io.to(receiverSocketId).emit("unreadNotificationCount", {
      unreadNotificationCount: unreadNotificationCount,
    });
    res.status(200).json({ message: "ƒê√£ x√≥a th√¥ng b√°o!" });
  } catch (error) {
    console.error("L·ªói khi x√≥a th√¥ng b√°o:", error);
    res.status(500).json({ error: "L·ªói khi x√≥a th√¥ng b√°o!" });
  }
};
const deleteAllNotification = async (req, res) => {
  try {
    const { userId } = req.query;

    const notification = await UserNotification.destroy({
      where: { user_id: userId },
    });

    if (!notification) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y th√¥ng b√°o!" });
    }
    const io = getIO();
    const receiverSocketId = onlineUsers[userId];
    io.to(receiverSocketId).emit("AllNotificationDeleted", userId);
    io.to(receiverSocketId).emit("unreadNotificationCount", {
      unreadNotificationCount: 0,
    });

    res.status(200).json({ message: "ƒê√£ x√≥a th√¥ng b√°o!" });
  } catch (error) {
    console.error("L·ªói khi x√≥a th√¥ng b√°o:", error);
    res.status(500).json({ error: "L·ªói khi x√≥a th√¥ng b√°o!" });
  }
};
const markAsRead = async (req, res) => {
  try {
    const { notificationId, userId } = req.body;

    const updated = await UserNotification.update(
      { status: 1 },
      { where: { notification_id: notificationId, user_id: userId } }
    );

    if (updated[0] === 0) {
      return res.status(404).json({ error: "Th√¥ng b√°o kh√¥ng t·ªìn t·∫°i!" });
    }
    const io = getIO();
    const receiverSocketId = onlineUsers[userId];
    io.to(receiverSocketId).emit("notificationRead", notificationId);
    const unreadNotificationCount = await UserNotification.count({
      where: { user_id: userId, status: 0 },
    });
    io.to(receiverSocketId).emit("unreadNotificationCount", {
      unreadNotificationCount: unreadNotificationCount,
    });
    res.status(200).json({ message: "ƒê√£ ƒë·ªçc th√¥ng b√°o!" });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i th√¥ng b√°o:", error);
    res.status(500).json({ error: "L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i th√¥ng b√°o!" });
  }
};
const markAllAsRead = async (req, res) => {
  try {
    const { userId } = req.body;

    const updated = await UserNotification.update(
      { status: 1 },
      { where: { user_id: userId, status: 0 } }
    );
    const io = getIO();
    const receiverSocketId = onlineUsers[userId];

    io.to(receiverSocketId).emit("allNotificationsRead", userId);
    io.to(receiverSocketId).emit("unreadNotificationCount", {
      unreadNotificationCount: 0,
    });

    res
      .status(200)
      .json({ message: "T·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ƒë√£ ƒë·ªçc!" });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i t·∫•t c·∫£ th√¥ng b√°o:", error);
    res
      .status(500)
      .json({ error: "L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i t·∫•t c·∫£ th√¥ng b√°o!" });
  }
};
const sendTagNotification = async (req, res) => {
  try {
    const { classroomId, taggedUserIds } = req.body;
    const message = "B·∫°n ƒëang ƒë∆∞·ª£c tag trong l·ªõp ";
    // Ki·ªÉm tra ƒë·∫ßu v√†o
    if (
      !taggedUserIds ||
      !Array.isArray(taggedUserIds) ||
      taggedUserIds.length === 0
    ) {
      return res
        .status(400)
        .json({ error: "Danh s√°ch ng∆∞·ªùi d√πng ƒë∆∞·ª£c tag l√† b·∫Øt bu·ªôc!" });
    }
    if (!message) {
      return res.status(400).json({ error: "Th√¥ng b√°o kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!" });
    }

    // Ki·ªÉm tra v√† l·ªçc ra user h·ª£p l·ªá
    const targetUsers = await User.findAll({
      where: { user_id: { [Op.in]: taggedUserIds } },
      attributes: ["user_id"],
    });

    if (targetUsers.length === 0) {
      return res
        .status(404)
        .json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng h·ª£p l·ªá!" });
    }
    const classroom = await Classroom.findOne({
      where: { classroom_id: classroomId },
      attributes: ["classroom_id"],
      include: [
        {
          model: Course,
          attributes: ["course_name"],
        },
      ],
    });
    // T·∫°o notification
    const notification = await Notification.create({
      notification_type: "tag",
      message: message + classroom.Course.course_name,
    });

    // G·ª≠i th√¥ng b√°o cho t·ª´ng user trong danh s√°ch
    const io = getIO();
    for (const user of targetUsers) {
      const { user_id } = user;

      // L∆∞u v√†o database
      await UserNotification.create({
        user_id,
        notification_id: notification.notification_id,
        status: 0, // Tr·∫°ng th√°i m·∫∑c ƒë·ªãnh: ch∆∞a ƒë·ªçc
      });

      // G·ª≠i th√¥ng b√°o qua Socket.IO n·∫øu user online
      const receiverSocketId = onlineUsers[user_id];
      if (receiverSocketId) {
        io.to(receiverSocketId).emit("receiveNotification", {
          notification_id: notification.notification_id,
          notification_type: notification.notification_type,
          message,
          timestamp: new Date().toISOString(),
          status: 0,
        });

        io.to(receiverSocketId).emit("toastNotification", {
          notificationId: notification.notification_id,
          notificationType: "tag",
          message,
        });

        console.log(`üì© ƒê√£ g·ª≠i th√¥ng b√°o tag ƒë·∫øn user ${user_id}`);
      } else {
        console.log(`‚ö†Ô∏è User ${user_id} kh√¥ng online, ch·ªâ l∆∞u v√†o database.`);
      }
    }

    res.status(201).json({
      message: `ƒê√£ g·ª≠i th√¥ng b√°o tag ƒë·∫øn ${targetUsers.length} ng∆∞·ªùi d√πng!`,
    });
  } catch (error) {
    console.error("L·ªói khi g·ª≠i th√¥ng b√°o tag:", error);
    res.status(500).json({ error: "L·ªói khi g·ª≠i th√¥ng b√°o!" });
  }
};
const getUnreadNotificationCount = async (req, res) => {
  try {
    const { userId } = req.query;

    const unreadNotificationCount = await UserNotification.count({
      where: { user_id: userId, status: 0 },
    });

    res.status(200).json({ unreadNotificationCount });
  } catch (error) {
    console.error("L·ªói khi l·∫•y s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc:", error);
    res.status(500).json({ error: "L·ªói khi l·∫•y s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc!" });
  }
};
module.exports = {
  sendNotificationAllUser,
  getNotifications,
  deleteNotification,
  deleteAllNotification,
  markAsRead,
  markAllAsRead,
  sendNotificationToClassroomUsers,
  sendNotificationToSpecificUser,
  sendNotificationToClassroomTeachers,
  sendTagNotification,
  getUnreadNotificationCount,
};
